// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcManager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcManagerClient is the client API for GrpcManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcManagerClient interface {
	Link(ctx context.Context, opts ...grpc.CallOption) (GrpcManager_LinkClient, error)
	ListPeers(ctx context.Context, in *PeerListRequest, opts ...grpc.CallOption) (*PeerListResponse, error)
}

type grpcManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcManagerClient(cc grpc.ClientConnInterface) GrpcManagerClient {
	return &grpcManagerClient{cc}
}

func (c *grpcManagerClient) Link(ctx context.Context, opts ...grpc.CallOption) (GrpcManager_LinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcManager_ServiceDesc.Streams[0], "/grpcManager.GrpcManager/Link", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcManagerLinkClient{stream}
	return x, nil
}

type GrpcManager_LinkClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type grpcManagerLinkClient struct {
	grpc.ClientStream
}

func (x *grpcManagerLinkClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcManagerLinkClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcManagerClient) ListPeers(ctx context.Context, in *PeerListRequest, opts ...grpc.CallOption) (*PeerListResponse, error) {
	out := new(PeerListResponse)
	err := c.cc.Invoke(ctx, "/grpcManager.GrpcManager/ListPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcManagerServer is the server API for GrpcManager service.
// All implementations must embed UnimplementedGrpcManagerServer
// for forward compatibility
type GrpcManagerServer interface {
	Link(GrpcManager_LinkServer) error
	ListPeers(context.Context, *PeerListRequest) (*PeerListResponse, error)
	mustEmbedUnimplementedGrpcManagerServer()
}

// UnimplementedGrpcManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcManagerServer struct {
}

func (UnimplementedGrpcManagerServer) Link(GrpcManager_LinkServer) error {
	return status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedGrpcManagerServer) ListPeers(context.Context, *PeerListRequest) (*PeerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedGrpcManagerServer) mustEmbedUnimplementedGrpcManagerServer() {}

// UnsafeGrpcManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcManagerServer will
// result in compilation errors.
type UnsafeGrpcManagerServer interface {
	mustEmbedUnimplementedGrpcManagerServer()
}

func RegisterGrpcManagerServer(s grpc.ServiceRegistrar, srv GrpcManagerServer) {
	s.RegisterService(&GrpcManager_ServiceDesc, srv)
}

func _GrpcManager_Link_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcManagerServer).Link(&grpcManagerLinkServer{stream})
}

type GrpcManager_LinkServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type grpcManagerLinkServer struct {
	grpc.ServerStream
}

func (x *grpcManagerLinkServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcManagerLinkServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcManager_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcManagerServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcManager.GrpcManager/ListPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcManagerServer).ListPeers(ctx, req.(*PeerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcManager_ServiceDesc is the grpc.ServiceDesc for GrpcManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcManager.GrpcManager",
	HandlerType: (*GrpcManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPeers",
			Handler:    _GrpcManager_ListPeers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Link",
			Handler:       _GrpcManager_Link_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_manager.proto",
}
